KeyPoints:
  intro: Delete Node in a Linked list. Ok, so the problem is as follows.
  key_point_1:
    0: Write a function to delete a node in a singly linked list.,
    1:
      fade_in_temp_trav: Here, we have a linked list with pointers p1 and p2, with p1 situated at the head, and p2 at the heads next node.
      move_first_temp_trav_n: We advance both pointers until p1 reaches the node before the node to be removed.
      move_second_temp_trav_n: Then, move p2 one more node so that p1 and p2 sandwich the node to be removed.
      wave_pointer: Now, take p1s next pointer
      curve_pointer: and set it equal to p2.
      fade_out_container: We have now effectively removed the node from the linked list.
      flatten_list: Return everything to normal.
    2: is in
    3:
      next_fade_in_temp_trav: the list
      next_move_first_temp_trav_n: and is not
      next_wave_pointer: a tail node ok now that we've been introduced
      next_shrink_pointer: to the problem let's try to understand
      next_unshrink_pointer: the problem constraints because they can
      next_curve_pointer: often provide insight about the solution
      next_fade_out_container: at first glance the first constraint may seem
      next_flatten_list: quite strange why is the lower bound 2 is
  key_point_1_fade_in: there 
  _IMPLICIT_WAIT_1: something special about 2 well if
