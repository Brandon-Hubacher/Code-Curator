fade_in_title: Reverse linked
fade_in_statement_header: list.
fade_in_statement: Given the head of a singly linked list, reverse the list, and return the reversed list. Before we go over the constraints, let's ask clarifying questions. Not only is this an important skill that will be expected of you in interviews, but it also helps with conceptualizing the problem.
fade_in_clarifying_questions_header: When thinking of clarifying questions to ask, you should look for
fade_in_first_clarifying_questions_point: parts of the question that are unclear
fade_in_second_clarifying_questions_point: and edge cases. I think the problem is clear so let's
fade_in_edge_case_header: focus on edge cases. The only input is a singly linked list, which is a recursive data structure. Let's take a look at the
__START__:
fade_in_list_node_code: ListNode class that makes up this data structure. A ListNode has two attributes
highlight_first_node_attr: a value, which is an integer
highlight_second_node_attr: a next node, which is another ListNode object